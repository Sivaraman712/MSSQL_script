--Create tables in DBADB if tables already exist in DBADB  :Disable the old DBADB job_failure Job and rename the tables. Proceed with creating Table.
USE [DBADB]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[sql_server_agent_job](
	[sql_server_agent_job_id] [int] IDENTITY(1,1) NOT NULL,
	[sql_server_agent_job_id_guid] [uniqueidentifier] NOT NULL,
	[sql_server_agent_job_name] [nvarchar](128) NOT NULL,
	[job_create_datetime_utc] [datetime] NOT NULL,
	[job_last_modified_datetime_utc] [datetime] NOT NULL,
	[is_enabled] [bit] NOT NULL,
	[is_deleted] [bit] NOT NULL,
	[job_category_name] [varchar](100) NOT NULL,
	[owner_login_name] [varchar](256) NULL,
	[Frequency] [nvarchar](max) NULL,
	[DayInterval] [nvarchar](max) NULL,
	[DailyFrequency] [nvarchar](max) NULL,
	[StartTime] [nvarchar](8) NULL,
	[EndTime] [nvarchar](8) NULL,
	[ScheduleIsEnabled] [tinyint] NULL,
 CONSTRAINT [PK_sql_server_agent_job1] PRIMARY KEY CLUSTERED 
(
	[sql_server_agent_job_id] ASC
)
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


create TABLE [dbo].[sql_server_agent_job_failure](
	[sql_server_agent_job_failure_id] [int] IDENTITY(1,1) NOT NULL,
	[sql_server_agent_job_id] [int] NOT NULL,
	[sql_server_agent_instance_id] [int] NOT NULL,
	[job_start_time_utc] [datetime] NOT NULL,
	[job_failure_time_utc] [datetime] NOT NULL,
	[job_failure_step_number] [smallint] NOT NULL,
	[job_failure_step_name] [varchar](250) NOT NULL,
	[job_failure_message] [varchar](max) NOT NULL,
	[job_step_failure_message] [varchar](max) NOT NULL,
	[job_step_severity] [int] NOT NULL,
	[job_step_message_id] [int] NOT NULL,
	[retries_attempted] [int] NOT NULL,
	[has_email_been_sent_to_operator] tinyint NOT NULL,
	[ticket_status] [varchar](50) NULL,
 CONSTRAINT [PK_sql_server_agent_job_failure1] PRIMARY KEY CLUSTERED 
(
	[sql_server_agent_job_failure_id] ASC
)
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[sql_server_agent_job_failure]  WITH CHECK ADD  CONSTRAINT [FK_sql_server_agent_job_failure_sql_server_agent_job1] FOREIGN KEY([sql_server_agent_job_id])
REFERENCES [dbo].[sql_server_agent_job] ([sql_server_agent_job_id])
GO

ALTER TABLE [dbo].[sql_server_agent_job_failure] CHECK CONSTRAINT [FK_sql_server_agent_job_failure_sql_server_agent_job1]
GO

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO


-- Collect Job and Job failure last 24 hours (1440 mins) and loads into [DBADB] 

/*    Step 1 Collect Use DBADB */
USE DBADB;
GO
SET NOCOUNT ON;
IF OBJECT_ID('tempdb..#job_failure', 'U') IS NOT NULL
        DROP TABLE #job_failure;
		IF OBJECT_ID('tempdb..#job_step_failure', 'U') IS NOT NULL
		DROP TABLE #job_step_failure;


	DECLARE  @minutes_to_monitor SMALLINT = 1440;
	
	

	WITH JobSchedules AS (
    SELECT
        ss.schedule_id,
        ss.enabled,
        CASE ss.freq_type
            WHEN 1 THEN 'One time only'
            WHEN 4 THEN 'Daily'
            WHEN 8 THEN 'Weekly'
            WHEN 16 THEN 'Monthly'
            WHEN 32 THEN 'Monthly, Relative'
            WHEN 64 THEN 'When SQL Server Agent starts'
            WHEN 128 THEN 'When computer is idle'
            ELSE 'Other'
        END AS Frequency,
        
        -- Day Interval logic
        IIF(ss.freq_type = 32 AND ss.freq_relative_interval <> 0,
            CASE ss.freq_relative_interval
                WHEN 1 THEN 'First '
                WHEN 2 THEN 'Second '
                WHEN 4 THEN 'Third '
                WHEN 8 THEN 'Fourth '
                WHEN 16 THEN 'Last '
            END, '') +
        CASE ss.freq_type
            WHEN 1 THEN ''
            WHEN 4 THEN IIF(ss.freq_interval = 1, 'Every day', 'Every ' + CAST(ss.freq_interval AS VARCHAR(3)) + ' day(s)')
            WHEN 8 THEN
                IIF(ss.freq_interval & 2 = 2, 'Mon ', '') +
                IIF(ss.freq_interval & 4 = 4, 'Tue ', '') +
                IIF(ss.freq_interval & 8 = 8, 'Wed ', '') +
                IIF(ss.freq_interval & 16 = 16, 'Thu ', '') +
                IIF(ss.freq_interval & 32 = 32, 'Fri ', '') +
                IIF(ss.freq_interval & 64 = 64, 'Sat ', '') +
                IIF(ss.freq_interval & 1 = 1, 'Sun ', '')
            WHEN 16 THEN 'On the ' + CAST(ss.freq_interval AS VARCHAR(3)) + ' day of the month.'
            WHEN 32 THEN
                CASE ss.freq_interval
                    WHEN 1 THEN 'Sunday'
                    WHEN 2 THEN 'Monday'
                    WHEN 3 THEN 'Tuesday'
                    WHEN 4 THEN 'Wednesday'
                    WHEN 5 THEN 'Thursday'
                    WHEN 6 THEN 'Friday'
                    WHEN 7 THEN 'Saturday'
                    WHEN 8 THEN 'Day'
                    WHEN 9 THEN 'Weekday'
                    WHEN 10 THEN 'Weekend day'
                END
            ELSE ''
        END AS DayInterval,
        IIF(
            ss.freq_type = 4 AND ss.freq_interval = 1 AND ss.freq_subday_interval = 0, 
            'Occurs Once at ' + STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':'),
            IIF(
                ss.freq_type = 8 AND ss.freq_subday_type = 1 AND ss.freq_subday_interval = 0, 
                'Occurs Once at ' + STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':'),
                IIF(
                    ss.freq_subday_interval <> 0,
                    CASE ss.freq_subday_type
                        WHEN 1 THEN 'Occurs Once at ' + STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3,0,':'), 6,0,':')
                        WHEN 2 THEN 'Repeat every ' + CAST(ss.freq_subday_interval AS VARCHAR(3)) + ' seconds'
                        WHEN 4 THEN 'Repeat every ' + CAST(ss.freq_subday_interval AS VARCHAR(3)) + ' minutes'
                        WHEN 8 THEN 'Repeat every ' + CAST(ss.freq_subday_interval AS VARCHAR(3)) + ' hours'
                    END,
                    ''
                )
            )
        ) AS DailyFrequency,
        
        CASE
            WHEN ss.freq_type = 8 THEN 'Repeat every ' + CAST(ss.freq_recurrence_factor AS VARCHAR(3)) + ' week(s).'
            WHEN ss.freq_type IN (16, 32) THEN 'Repeat every ' + CAST(ss.freq_recurrence_factor AS VARCHAR(3)) + ' month(s).'
            ELSE ''
        END AS Recurrence,
        
        -- Start and End time formatting
        STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':') AS StartTime,
        STUFF(STUFF(RIGHT('00000' + CAST(ss.active_end_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':') AS EndTime
    FROM msdb.dbo.sysschedules AS ss
), RankedJobSchedules AS (
    SELECT 
        ss.schedule_id,
        ss.Frequency,
        ss.DayInterval,
        ss.DailyFrequency,
        ss.StartTime,
        ss.EndTime,
        ss.enabled,
        JJS.job_id,
        ROW_NUMBER() OVER (PARTITION BY JJS.job_id ORDER BY ss.schedule_id) AS rn
    FROM JobSchedules ss
    JOIN msdb.dbo.sysjobschedules JJS ON ss.schedule_id = JJS.schedule_id
)
MERGE INTO [DBADB].[dbo].[sql_server_agent_job] AS TARGET
USING (
    SELECT
        J.job_id AS sql_server_agent_job_id_guid,
        J.name AS sql_server_agent_job_name,
        J.date_created AS job_create_datetime_utc,
        J.date_modified AS job_last_modified_datetime_utc,
        J.enabled AS is_enabled,
        0 AS is_deleted,
        LEFT(ISNULL(jc.name, 'Unknown'), 100) AS job_category_name,
        LEFT(ISNULL(SP.name, 'Unknown'), 256) AS owner_login_name,
        JS.schedule_id,
        ISNULL(JS.Frequency, '') AS Frequency,
        ISNULL(JS.DayInterval, '') AS DayInterval,
        ISNULL(JS.DailyFrequency, '') AS DailyFrequency,
        ISNULL(JS.StartTime, '') AS StartTime,
        ISNULL(JS.EndTime, '') AS EndTime,
        ISNULL(JS.enabled, 0) AS ScheduleIsEnabled
    FROM msdb.dbo.sysjobs AS J
    LEFT JOIN sys.server_principals AS SP ON J.owner_sid = SP.sid
    LEFT JOIN msdb.dbo.sysjobschedules AS JJS ON J.job_id = JJS.job_id
    LEFT JOIN RankedJobSchedules AS JS ON JJS.schedule_id = JS.schedule_id AND JS.rn = 1  -- Ensure only one schedule per job
    LEFT JOIN msdb.dbo.syscategories AS jc ON jc.category_id = J.category_id
) AS SOURCE
ON (SOURCE.sql_server_agent_job_id_guid = TARGET.sql_server_agent_job_id_guid and SOURCE.sql_server_agent_job_name=TARGET.sql_server_agent_job_name)

-- When not matched, insert the job details
WHEN NOT MATCHED BY TARGET THEN
    INSERT (
        sql_server_agent_job_id_guid,
        sql_server_agent_job_name,
        job_create_datetime_utc,
        job_last_modified_datetime_utc,
        is_enabled,
        is_deleted,
        job_category_name,
        owner_login_name,
        Frequency,
        DayInterval,
        DailyFrequency,
        StartTime,
        EndTime,
        ScheduleIsEnabled
    )
    VALUES (
        SOURCE.sql_server_agent_job_id_guid,
        LEFT(SOURCE.sql_server_agent_job_name, 256),
        SOURCE.job_create_datetime_utc,
        SOURCE.job_last_modified_datetime_utc,
        SOURCE.is_enabled,
        SOURCE.is_deleted,
        LEFT(SOURCE.job_category_name, 100),
        LEFT(SOURCE.owner_login_name, 256),
        LEFT(SOURCE.Frequency, 4000),
        LEFT(SOURCE.DayInterval, 4000),
        LEFT(SOURCE.DailyFrequency, 4000),
        LEFT(SOURCE.StartTime, 16),
        LEFT(SOURCE.EndTime, 16),
        SOURCE.ScheduleIsEnabled
    )

-- When matched, update the existing job details if they are different
WHEN MATCHED AND (
    SOURCE.job_last_modified_datetime_utc > TARGET.job_last_modified_datetime_utc AND(
    SOURCE.Frequency <> TARGET.Frequency OR
    SOURCE.DayInterval <> TARGET.DayInterval OR
    SOURCE.DailyFrequency <> TARGET.DailyFrequency OR
    SOURCE.StartTime <> TARGET.StartTime OR
    SOURCE.EndTime <> TARGET.EndTime OR
    SOURCE.ScheduleIsEnabled <> TARGET.ScheduleIsEnabled)
) THEN
    UPDATE SET 
        sql_server_agent_job_name = LEFT(SOURCE.sql_server_agent_job_name, 256),
        job_create_datetime_utc = SOURCE.job_create_datetime_utc,
        job_last_modified_datetime_utc = SOURCE.job_last_modified_datetime_utc,
        is_enabled = SOURCE.is_enabled,
        is_deleted = SOURCE.is_deleted,
        job_category_name = LEFT(SOURCE.job_category_name, 100),
        owner_login_name = LEFT(SOURCE.owner_login_name, 256),
        Frequency = LEFT(SOURCE.Frequency, 4000),
        DayInterval = LEFT(SOURCE.DayInterval, 4000),
        DailyFrequency = LEFT(SOURCE.DailyFrequency, 4000),
        StartTime = LEFT(SOURCE.StartTime, 16),
        EndTime = LEFT(SOURCE.EndTime, 16),
        ScheduleIsEnabled = SOURCE.ScheduleIsEnabled;



	WITH CTE_NORMALIZE_DATETIME_DATA AS (
		SELECT
			sysjobhistory.job_id AS sql_server_agent_job_id_guid,
			CAST(sysjobhistory.run_date AS VARCHAR(MAX)) AS run_date_string, 
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_time AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_time AS VARCHAR(MAX)) AS run_time_string,
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_duration AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_duration AS VARCHAR(MAX)) AS run_duration_string,
			sysjobhistory.run_status,
			sysjobhistory.message,
			sysjobhistory.instance_id
		FROM msdb.dbo.sysjobhistory WITH (NOLOCK)
		WHERE sysjobhistory.run_status = 0
		AND sysjobhistory.step_id = 0),
	CTE_GENERATE_DATETIME_DATA AS (
		SELECT
			CTE_NORMALIZE_DATETIME_DATA.sql_server_agent_job_id_guid,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 5, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 7, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 1, 4) AS DATETIME) +
			CAST(STUFF(STUFF(CTE_NORMALIZE_DATETIME_DATA.run_time_string, 5, 0, ':'), 3, 0, ':') AS DATETIME) AS job_start_datetime,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 1, 2) AS INT) * 3600 +
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 3, 2) AS INT) * 60 + 
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 5, 2) AS INT) AS job_duration_seconds,
			CASE CTE_NORMALIZE_DATETIME_DATA.run_status
				WHEN 0 THEN 'Failure'
				WHEN 1 THEN 'Success'
				WHEN 2 THEN 'Retry'
				WHEN 3 THEN 'Canceled'
				ELSE 'Unknown'
			END AS job_status,
			CTE_NORMALIZE_DATETIME_DATA.message,
			CTE_NORMALIZE_DATETIME_DATA.instance_id
		FROM CTE_NORMALIZE_DATETIME_DATA)
	SELECT
		CTE_GENERATE_DATETIME_DATA.sql_server_agent_job_id_guid,
		( CTE_GENERATE_DATETIME_DATA.job_start_datetime) AS job_start_time_utc,
		( DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime)) AS job_failure_time_utc,
		
		ISNULL(CTE_GENERATE_DATETIME_DATA.message, '') AS job_failure_message,
		CTE_GENERATE_DATETIME_DATA.instance_id
	INTO #job_failure
	FROM CTE_GENERATE_DATETIME_DATA
	WHERE ( DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime)) > DATEADD(MINUTE, -1 * @minutes_to_monitor, getdate());
	WITH CTE_NORMALIZE_DATETIME_DATA AS (
		SELECT
			sysjobhistory.job_id AS sql_server_agent_job_id_guid,
			CAST(sysjobhistory.run_date AS VARCHAR(MAX)) AS run_date_string, 
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_time AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_time AS VARCHAR(MAX)) AS run_time_string,
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_duration AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_duration AS VARCHAR(MAX)) AS run_duration_string,
			sysjobhistory.run_status,
			sysjobhistory.step_id,
			sysjobhistory.step_name,
			sysjobhistory.message,
			sysjobhistory.retries_attempted,
			sysjobhistory.sql_severity,
			sysjobhistory.sql_message_id,
			sysjobhistory.instance_id
		FROM msdb.dbo.sysjobhistory WITH (NOLOCK)
		WHERE sysjobhistory.run_status = 0
		AND sysjobhistory.step_id > 0 ),
	CTE_GENERATE_DATETIME_DATA AS (
		SELECT
			CTE_NORMALIZE_DATETIME_DATA.sql_server_agent_job_id_guid,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 5, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 7, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 1, 4) AS DATETIME) +
			CAST(STUFF(STUFF(CTE_NORMALIZE_DATETIME_DATA.run_time_string, 5, 0, ':'), 3, 0, ':') AS DATETIME) AS job_start_datetime,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 1, 2) AS INT) * 3600 +
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 3, 2) AS INT) * 60 + 
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 5, 2) AS INT) AS job_duration_seconds,
			CASE CTE_NORMALIZE_DATETIME_DATA.run_status
				WHEN 0 THEN 'Failure'
				WHEN 1 THEN 'Success'
				WHEN 2 THEN 'Retry'
				WHEN 3 THEN 'Canceled'
				ELSE 'Unknown'
			END AS job_status,
			CTE_NORMALIZE_DATETIME_DATA.step_id,
			CTE_NORMALIZE_DATETIME_DATA.step_name,
			CTE_NORMALIZE_DATETIME_DATA.message,
			CTE_NORMALIZE_DATETIME_DATA.retries_attempted,
			CTE_NORMALIZE_DATETIME_DATA.sql_severity,
			CTE_NORMALIZE_DATETIME_DATA.sql_message_id,
			CTE_NORMALIZE_DATETIME_DATA.instance_id
		FROM CTE_NORMALIZE_DATETIME_DATA)
	SELECT
		CTE_GENERATE_DATETIME_DATA.sql_server_agent_job_id_guid,
		 CTE_GENERATE_DATETIME_DATA.job_start_datetime AS job_start_time_utc,
		DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime) AS job_failure_time_utc,
		CTE_GENERATE_DATETIME_DATA.step_id AS job_failure_step_number,
		ISNULL(CTE_GENERATE_DATETIME_DATA.message, '') AS job_step_failure_message,
		CTE_GENERATE_DATETIME_DATA.sql_severity AS job_step_severity,
		CTE_GENERATE_DATETIME_DATA.retries_attempted,
		CTE_GENERATE_DATETIME_DATA.step_name,
		CTE_GENERATE_DATETIME_DATA.sql_message_id,
		CTE_GENERATE_DATETIME_DATA.instance_id
	INTO #job_step_failure
	FROM CTE_GENERATE_DATETIME_DATA
	WHERE CTE_GENERATE_DATETIME_DATA.sql_message_id >-1 AND DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime) > DATEADD(MINUTE, -1 * @minutes_to_monitor, getdate());
	WITH CTE_FAILURE_STEP AS (
		SELECT
			*,
			ROW_NUMBER() OVER (PARTITION BY job_step_failure.sql_server_agent_job_id_guid, job_step_failure.job_failure_time_utc ORDER BY job_step_failure.job_failure_step_number DESC) AS recent_step_rank
		FROM #job_step_failure job_step_failure)
	INSERT INTO [DBADB].dbo.sql_server_agent_job_failure
		(sql_server_agent_job_id, sql_server_agent_instance_id, job_start_time_utc, job_failure_time_utc, job_failure_step_number, job_failure_step_name,
		 job_failure_message, job_step_failure_message, job_step_severity, job_step_message_id, retries_attempted, has_email_been_sent_to_operator)
	SELECT
		sql_server_agent_job.sql_server_agent_job_id,
		CTE_FAILURE_STEP.instance_id,
		job_failure.job_start_time_utc,
		CTE_FAILURE_STEP.job_failure_time_utc,
		CTE_FAILURE_STEP.job_failure_step_number,
		CTE_FAILURE_STEP.step_name AS job_failure_step_name,
		job_failure.job_failure_message,
		CTE_FAILURE_STEP.job_step_failure_message,
		CTE_FAILURE_STEP.job_step_severity,
		CTE_FAILURE_STEP.sql_message_id AS job_step_message_id,
		CTE_FAILURE_STEP.retries_attempted,
		0 AS has_email_been_sent_to_operator
	FROM #job_failure job_failure
	INNER JOIN [DBADB].dbo.sql_server_agent_job
	ON job_failure.sql_server_agent_job_id_guid = sql_server_agent_job.sql_server_agent_job_id_guid
	INNER JOIN CTE_FAILURE_STEP
	ON job_failure.sql_server_agent_job_id_guid = CTE_FAILURE_STEP.sql_server_agent_job_id_guid
	AND job_failure.job_failure_time_utc = CTE_FAILURE_STEP.job_failure_time_utc
	WHERE CTE_FAILURE_STEP.recent_step_rank = 1
	AND CTE_FAILURE_STEP.instance_id NOT IN (SELECT sql_server_agent_instance_id FROM [DBADB].dbo.sql_server_agent_job_failure)
	AND sql_server_agent_job.job_category_name <> 'Unmonitored';


	INSERT INTO [DBADB].dbo.sql_server_agent_job_failure
		(sql_server_agent_job_id, sql_server_agent_instance_id, job_start_time_utc, job_failure_time_utc, job_failure_step_number, job_failure_step_name,
		 job_failure_message, job_step_failure_message, job_step_severity, job_step_message_id, retries_attempted, has_email_been_sent_to_operator)
	SELECT
		sql_server_agent_job.sql_server_agent_job_id,
		job_failure.instance_id,
		job_failure.job_start_time_utc,
		job_failure.job_failure_time_utc,
		0 AS job_failure_step_number,
		'' AS job_failure_step_name,
		job_failure.job_failure_message,
		'' AS job_step_failure_message,
		-1 AS job_step_severity,
		-1 AS job_step_message_id,
		0 AS retries_attempted,
		0 AS has_email_been_sent_to_operator
	FROM #job_failure job_failure
	INNER JOIN dbo.sql_server_agent_job
	ON job_failure.sql_server_agent_job_id_guid = sql_server_agent_job.sql_server_agent_job_id_guid
	WHERE job_failure.instance_id NOT IN (SELECT sql_server_agent_job_failure.sql_server_agent_instance_id FROM dbo.sql_server_agent_job_failure)
	AND NOT EXISTS (SELECT * FROM #job_step_failure job_step_failure WHERE job_failure.sql_server_agent_job_id_guid = job_step_failure.sql_server_agent_job_id_guid	AND job_failure.job_failure_time_utc = job_step_failure.job_failure_time_utc);
	WITH CTE_FAILURE_STEP AS (
		SELECT
			*,
			ROW_NUMBER() OVER (PARTITION BY job_step_failure.sql_server_agent_job_id_guid, job_step_failure.job_failure_time_utc ORDER BY job_step_failure.job_failure_step_number DESC) AS recent_step_rank
		FROM #job_step_failure job_step_failure)
	INSERT INTO [DBADB].dbo.sql_server_agent_job_failure
		(sql_server_agent_job_id, sql_server_agent_instance_id, job_start_time_utc, job_failure_time_utc, job_failure_step_number, job_failure_step_name,
		 job_failure_message, job_step_failure_message, job_step_severity, job_step_message_id, retries_attempted, has_email_been_sent_to_operator)
	SELECT
		sql_server_agent_job.sql_server_agent_job_id,
		CTE_FAILURE_STEP.instance_id,
		CTE_FAILURE_STEP.job_start_time_utc,
		CTE_FAILURE_STEP.job_failure_time_utc,
		CTE_FAILURE_STEP.job_failure_step_number,
		CTE_FAILURE_STEP.step_name AS job_failure_step_name,
		'' AS job_failure_message,
		CTE_FAILURE_STEP.job_step_failure_message,
		CTE_FAILURE_STEP.job_step_severity,
		CTE_FAILURE_STEP.sql_message_id AS job_step_message_id,
		CTE_FAILURE_STEP.retries_attempted,
		0 AS has_email_been_sent_to_operator
	FROM CTE_FAILURE_STEP
	INNER JOIN dbo.sql_server_agent_job
	ON CTE_FAILURE_STEP.sql_server_agent_job_id_guid = sql_server_agent_job.sql_server_agent_job_id_guid
	LEFT JOIN #job_failure job_failure
	ON job_failure.sql_server_agent_job_id_guid = CTE_FAILURE_STEP.sql_server_agent_job_id_guid
	AND job_failure.job_failure_time_utc = CTE_FAILURE_STEP.job_failure_time_utc
	WHERE CTE_FAILURE_STEP.recent_step_rank = 1
	AND job_failure.sql_server_agent_job_id_guid IS NULL 
	AND CTE_FAILURE_STEP.instance_id NOT IN (SELECT sql_server_agent_instance_id FROM [DBADB].dbo.sql_server_agent_job_failure);

	Drop table #job_failure,#job_step_failure;
	SET NOCOUNT OFF;
GO
-- Step 1 code ends....



-- Collect Job and Job failure last 24 hours (1440 mins) and loads into [DBADB] 

/*    Step 1 Collect Use DBADB */
USE [DBADB]
GO

SET NOCOUNT,ANSI_NULLS,QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('tempdb..#JobSchedules', 'U') IS NOT NULL
        DROP TABLE #JobSchedules;
IF OBJECT_ID('dbadb.dbo.sysschedules', 'U') IS NOT NULL
    AND (SELECT COUNT(*) FROM dbadb.dbo.sysschedules) > 1
BEGIN
    TRUNCATE TABLE dbadb.dbo.sysschedules;
END
GO
IF OBJECT_ID('dbadb.dbo.sysschedules', 'U') IS  NULL
BEGIN
-- Create the sysschedules table
CREATE TABLE [dbadb].[dbo].[sysschedules](
    [job_id] [uniqueidentifier] NULL,
    [schedule_id] [int] NULL,
    [enabled][int] NULL,
    [freq_type] [int] NULL,
    [freq_interval] [int] NULL,
    [freq_subday_type] [int] NULL,
    [freq_subday_interval] [int] NULL,
    [freq_relative_interval] [int] NULL,
    [freq_recurrence_factor] [int] NULL,
    [active_start_date] [int] NULL,
    [active_end_date] [int] NULL,
    [active_start_time] [int] NULL,
    [active_end_time] [int] NULL,
    [date_created] [datetime] NULL,
    [ScheduleDescription] [nvarchar](max) NULL,
    [NextRunDate] [int] NULL,
    [NextRunTime] [int] NULL,
    [schedule_uid] [uniqueidentifier] NULL,
    [JobCount] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];

END
GO

CREATE TABLE #JobSchedules (
    job_id UNIQUEIDENTIFIER,
    ScheduleID INT,
    ScheduleName NVARCHAR(255),
    Enabled INT,
    FreqType INT,
    FreqInterval INT,
    FreqSubdayType INT,
    FreqSubdayInterval INT,
    FreqRelativeInterval INT,
    FreqRecurrenceFactor INT,
    ActiveStartDate INT,
    ActiveEndDate INT,
    ActiveStartTime INT,
    ActiveEndTime INT,
    DateCreated DATETIME,
    ScheduleDescription NVARCHAR(MAX),
    NextRunDate INT,
    NextRunTime INT,
    ScheduleUID UNIQUEIDENTIFIER,
    JobCount INT
);

-- Variable to hold dynamic SQL
DECLARE @sql NVARCHAR(MAX);
DECLARE @job_id UNIQUEIDENTIFIER;

-- Set-based insertion: Loop through each job and execute sp_help_jobschedule dynamically
-- Retrieve all job ids from msdb.dbo.sysjobs
DECLARE @job_ids TABLE (job_id UNIQUEIDENTIFIER);

-- Populate @job_ids table with job IDs
INSERT INTO @job_ids (job_id)
SELECT job_id FROM msdb.dbo.sysjobs ;

-- Loop through each job and dynamically execute sp_help_jobschedule
DECLARE job_cursor CURSOR FOR
SELECT job_id FROM @job_ids;

OPEN job_cursor;
FETCH NEXT FROM job_cursor INTO @job_id;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Build dynamic SQL to capture the schedule details for the current job
    SET @sql = N'INSERT INTO #JobSchedules ( ScheduleID, ScheduleName, Enabled, FreqType, FreqInterval, 
                                                FreqSubdayType, FreqSubdayInterval, FreqRelativeInterval, FreqRecurrenceFactor, 
                                                ActiveStartDate, ActiveEndDate, ActiveStartTime, ActiveEndTime, DateCreated, 
                                                ScheduleDescription, NextRunDate, NextRunTime, ScheduleUID, JobCount)
                EXEC msdb.dbo.sp_help_jobschedule @job_id = ''' + CAST(@job_id AS NVARCHAR(50)) + '''';

    -- Execute the dynamic SQL
    EXEC sp_executesql @sql;
	UPDATE #JobSchedules SET job_id = @job_id WHERE ScheduleID = (SELECT TOP 1 ScheduleID FROM #JobSchedules WHERE job_id IS NULL);
    -- Fetch the next job_id
    FETCH NEXT FROM job_cursor INTO @job_id;
END

-- Clean up the cursor
CLOSE job_cursor;
DEALLOCATE job_cursor;

-- Insert the collected data into dbo.sysschedules
INSERT INTO dbo.sysschedules (
    job_id, schedule_id, name, enabled, freq_type, freq_interval, 
    freq_subday_type, freq_subday_interval, freq_relative_interval, 
    freq_recurrence_factor, active_start_date, active_end_date, 
    active_start_time, active_end_time, date_created, ScheduleDescription, 
    NextRunDate, NextRunTime, schedule_uid, JobCount
)
SELECT 
    job_id, ScheduleID, ScheduleName, Enabled, FreqType, 
    FreqInterval, FreqSubdayType, FreqSubdayInterval, 
    FreqRelativeInterval, FreqRecurrenceFactor, ActiveStartDate, 
    ActiveEndDate, ActiveStartTime, ActiveEndTime, DateCreated, 
    ScheduleDescription, NextRunDate, NextRunTime, ScheduleUID, 
    JobCount
FROM #JobSchedules;

-- Clean up temporary table
DROP TABLE #JobSchedules;

SET NOCOUNT,ANSI_NULLS , QUOTED_IDENTIFIER OFF
GO

USE DBADB;
GO
SET NOCOUNT ON;
IF OBJECT_ID('tempdb..#job_failure', 'U') IS NOT NULL
        DROP TABLE #job_failure;
IF OBJECT_ID('tempdb..#job_step_failure', 'U') IS NOT NULL
		DROP TABLE #job_step_failure;


	DECLARE  @minutes_to_monitor SMALLINT = 1440;
	
	

	WITH JobSchedules AS (
    SELECT
        ss.schedule_id,
        ss.enabled,
        CASE ss.freq_type
            WHEN 1 THEN 'One time only'
            WHEN 4 THEN 'Daily'
            WHEN 8 THEN 'Weekly'
            WHEN 16 THEN 'Monthly'
            WHEN 32 THEN 'Monthly, Relative'
            WHEN 64 THEN 'When SQL Server Agent starts'
            WHEN 128 THEN 'When computer is idle'
            ELSE 'Other'
        END AS Frequency,
        
        -- Day Interval logic
        IIF(ss.freq_type = 32 AND ss.freq_relative_interval <> 0,
            CASE ss.freq_relative_interval
                WHEN 1 THEN 'First '
                WHEN 2 THEN 'Second '
                WHEN 4 THEN 'Third '
                WHEN 8 THEN 'Fourth '
                WHEN 16 THEN 'Last '
            END, '') +
        CASE ss.freq_type
            WHEN 1 THEN ''
            WHEN 4 THEN IIF(ss.freq_interval = 1, 'Every day', 'Every ' + CAST(ss.freq_interval AS VARCHAR(3)) + ' day(s)')
            WHEN 8 THEN
                IIF(ss.freq_interval & 2 = 2, 'Mon ', '') +
                IIF(ss.freq_interval & 4 = 4, 'Tue ', '') +
                IIF(ss.freq_interval & 8 = 8, 'Wed ', '') +
                IIF(ss.freq_interval & 16 = 16, 'Thu ', '') +
                IIF(ss.freq_interval & 32 = 32, 'Fri ', '') +
                IIF(ss.freq_interval & 64 = 64, 'Sat ', '') +
                IIF(ss.freq_interval & 1 = 1, 'Sun ', '')
            WHEN 16 THEN 'On the ' + CAST(ss.freq_interval AS VARCHAR(3)) + ' day of the month.'
            WHEN 32 THEN
                CASE ss.freq_interval
                    WHEN 1 THEN 'Sunday'
                    WHEN 2 THEN 'Monday'
                    WHEN 3 THEN 'Tuesday'
                    WHEN 4 THEN 'Wednesday'
                    WHEN 5 THEN 'Thursday'
                    WHEN 6 THEN 'Friday'
                    WHEN 7 THEN 'Saturday'
                    WHEN 8 THEN 'Day'
                    WHEN 9 THEN 'Weekday'
                    WHEN 10 THEN 'Weekend day'
                END
            ELSE ''
        END AS DayInterval,
        IIF(
            ss.freq_type = 4 AND ss.freq_interval = 1 AND ss.freq_subday_interval = 0, 
            'Occurs Once at ' + STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':'),
            IIF(
                ss.freq_type = 8 AND ss.freq_subday_type = 1 AND ss.freq_subday_interval = 0, 
                'Occurs Once at ' + STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':'),
                IIF(
                    ss.freq_subday_interval <> 0,
                    CASE ss.freq_subday_type
                        WHEN 1 THEN 'Occurs Once at ' + STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3,0,':'), 6,0,':')
                        WHEN 2 THEN 'Repeat every ' + CAST(ss.freq_subday_interval AS VARCHAR(3)) + ' seconds'
                        WHEN 4 THEN 'Repeat every ' + CAST(ss.freq_subday_interval AS VARCHAR(3)) + ' minutes'
                        WHEN 8 THEN 'Repeat every ' + CAST(ss.freq_subday_interval AS VARCHAR(3)) + ' hours'
                    END,
                    ''
                )
            )
        ) AS DailyFrequency,
        
        CASE
            WHEN ss.freq_type = 8 THEN 'Repeat every ' + CAST(ss.freq_recurrence_factor AS VARCHAR(3)) + ' week(s).'
            WHEN ss.freq_type IN (16, 32) THEN 'Repeat every ' + CAST(ss.freq_recurrence_factor AS VARCHAR(3)) + ' month(s).'
            ELSE ''
        END AS Recurrence,
        
        -- Start and End time formatting
        STUFF(STUFF(RIGHT('00000' + CAST(ss.active_start_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':') AS StartTime,
        STUFF(STUFF(RIGHT('00000' + CAST(ss.active_end_time AS VARCHAR(6)), 6), 3, 0, ':'), 6, 0, ':') AS EndTime
    FROM dbadb.dbo.sysschedules AS ss
), RankedJobSchedules AS (
    SELECT 
        ss.schedule_id,
        ss.Frequency,
        ss.DayInterval,
        ss.DailyFrequency,
        ss.StartTime,
        ss.EndTime,
        ss.enabled,
        JJS.job_id,
        ROW_NUMBER() OVER (PARTITION BY JJS.job_id ORDER BY ss.schedule_id) AS rn
    FROM JobSchedules ss
    JOIN dbadb.dbo.sysschedules JJS ON ss.schedule_id = JJS.schedule_id
)
MERGE INTO [DBADB].[dbo].[sql_server_agent_job] AS TARGET
USING (
    SELECT
        J.job_id AS sql_server_agent_job_id_guid,
        J.name AS sql_server_agent_job_name,
        J.date_created AS job_create_datetime_utc,
        J.date_modified AS job_last_modified_datetime_utc,
        J.enabled AS is_enabled,
        0 AS is_deleted,
        LEFT(ISNULL(jc.name, 'Unknown'), 100) AS job_category_name,
        LEFT(ISNULL(SP.name, 'Unknown'), 256) AS owner_login_name,
        JS.schedule_id,
        ISNULL(JS.Frequency, '') AS Frequency,
        ISNULL(JS.DayInterval, '') AS DayInterval,
        ISNULL(JS.DailyFrequency, '') AS DailyFrequency,
        ISNULL(JS.StartTime, '') AS StartTime,
        ISNULL(JS.EndTime, '') AS EndTime,
        ISNULL(JS.enabled, 0) AS ScheduleIsEnabled
    FROM msdb.dbo.sysjobs AS J
    LEFT JOIN sys.server_principals AS SP ON J.owner_sid = SP.sid
    LEFT JOIN dbadb.dbo.sysschedules AS JJS ON J.job_id = JJS.job_id
    LEFT JOIN RankedJobSchedules AS JS ON JJS.schedule_id = JS.schedule_id AND JS.rn = 1  -- Ensure only one schedule per job
    LEFT JOIN msdb.dbo.syscategories AS jc ON jc.category_id = J.category_id
) AS SOURCE
ON (SOURCE.sql_server_agent_job_id_guid = TARGET.sql_server_agent_job_id_guid and SOURCE.sql_server_agent_job_name=TARGET.sql_server_agent_job_name)

-- When not matched, insert the job details
WHEN NOT MATCHED BY TARGET THEN
    INSERT (
        sql_server_agent_job_id_guid,
        sql_server_agent_job_name,
        job_create_datetime_utc,
        job_last_modified_datetime_utc,
        is_enabled,
        is_deleted,
        job_category_name,
        owner_login_name,
        Frequency,
        DayInterval,
        DailyFrequency,
        StartTime,
        EndTime,
        ScheduleIsEnabled
    )
    VALUES (
        SOURCE.sql_server_agent_job_id_guid,
        LEFT(SOURCE.sql_server_agent_job_name, 256),
        SOURCE.job_create_datetime_utc,
        SOURCE.job_last_modified_datetime_utc,
        SOURCE.is_enabled,
        SOURCE.is_deleted,
        LEFT(SOURCE.job_category_name, 100),
        LEFT(SOURCE.owner_login_name, 256),
        LEFT(SOURCE.Frequency, 4000),
        LEFT(SOURCE.DayInterval, 4000),
        LEFT(SOURCE.DailyFrequency, 4000),
        LEFT(SOURCE.StartTime, 16),
        LEFT(SOURCE.EndTime, 16),
        SOURCE.ScheduleIsEnabled
    )

-- When matched, update the existing job details if they are different
WHEN MATCHED AND (
    SOURCE.job_last_modified_datetime_utc > TARGET.job_last_modified_datetime_utc AND(
    SOURCE.Frequency <> TARGET.Frequency OR
    SOURCE.DayInterval <> TARGET.DayInterval OR
    SOURCE.DailyFrequency <> TARGET.DailyFrequency OR
    SOURCE.StartTime <> TARGET.StartTime OR
    SOURCE.EndTime <> TARGET.EndTime OR
    SOURCE.ScheduleIsEnabled <> TARGET.ScheduleIsEnabled)
) THEN
    UPDATE SET 
        sql_server_agent_job_name = LEFT(SOURCE.sql_server_agent_job_name, 256),
        job_create_datetime_utc = SOURCE.job_create_datetime_utc,
        job_last_modified_datetime_utc = SOURCE.job_last_modified_datetime_utc,
        is_enabled = SOURCE.is_enabled,
        is_deleted = SOURCE.is_deleted,
        job_category_name = LEFT(SOURCE.job_category_name, 100),
        owner_login_name = LEFT(SOURCE.owner_login_name, 256),
        Frequency = LEFT(SOURCE.Frequency, 4000),
        DayInterval = LEFT(SOURCE.DayInterval, 4000),
        DailyFrequency = LEFT(SOURCE.DailyFrequency, 4000),
        StartTime = LEFT(SOURCE.StartTime, 16),
        EndTime = LEFT(SOURCE.EndTime, 16),
        ScheduleIsEnabled = SOURCE.ScheduleIsEnabled;



	WITH CTE_NORMALIZE_DATETIME_DATA AS (
		SELECT
			sysjobhistory.job_id AS sql_server_agent_job_id_guid,
			CAST(sysjobhistory.run_date AS VARCHAR(MAX)) AS run_date_string, 
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_time AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_time AS VARCHAR(MAX)) AS run_time_string,
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_duration AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_duration AS VARCHAR(MAX)) AS run_duration_string,
			sysjobhistory.run_status,
			sysjobhistory.message,
			sysjobhistory.instance_id
		FROM msdb.dbo.sysjobhistory WITH (NOLOCK)
		WHERE sysjobhistory.run_status = 0
		AND sysjobhistory.step_id = 0),
	CTE_GENERATE_DATETIME_DATA AS (
		SELECT
			CTE_NORMALIZE_DATETIME_DATA.sql_server_agent_job_id_guid,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 5, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 7, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 1, 4) AS DATETIME) +
			CAST(STUFF(STUFF(CTE_NORMALIZE_DATETIME_DATA.run_time_string, 5, 0, ':'), 3, 0, ':') AS DATETIME) AS job_start_datetime,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 1, 2) AS INT) * 3600 +
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 3, 2) AS INT) * 60 + 
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 5, 2) AS INT) AS job_duration_seconds,
			CASE CTE_NORMALIZE_DATETIME_DATA.run_status
				WHEN 0 THEN 'Failure'
				WHEN 1 THEN 'Success'
				WHEN 2 THEN 'Retry'
				WHEN 3 THEN 'Canceled'
				ELSE 'Unknown'
			END AS job_status,
			CTE_NORMALIZE_DATETIME_DATA.message,
			CTE_NORMALIZE_DATETIME_DATA.instance_id
		FROM CTE_NORMALIZE_DATETIME_DATA)
	SELECT
		CTE_GENERATE_DATETIME_DATA.sql_server_agent_job_id_guid,
		( CTE_GENERATE_DATETIME_DATA.job_start_datetime) AS job_start_time_utc,
		( DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime)) AS job_failure_time_utc,
		
		ISNULL(CTE_GENERATE_DATETIME_DATA.message, '') AS job_failure_message,
		CTE_GENERATE_DATETIME_DATA.instance_id
	INTO #job_failure
	FROM CTE_GENERATE_DATETIME_DATA
	WHERE ( DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime)) > DATEADD(MINUTE, -1 * @minutes_to_monitor, getdate());
	WITH CTE_NORMALIZE_DATETIME_DATA AS (
		SELECT
			sysjobhistory.job_id AS sql_server_agent_job_id_guid,
			CAST(sysjobhistory.run_date AS VARCHAR(MAX)) AS run_date_string, 
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_time AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_time AS VARCHAR(MAX)) AS run_time_string,
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_duration AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_duration AS VARCHAR(MAX)) AS run_duration_string,
			sysjobhistory.run_status,
			sysjobhistory.step_id,
			sysjobhistory.step_name,
			sysjobhistory.message,
			sysjobhistory.retries_attempted,
			sysjobhistory.sql_severity,
			sysjobhistory.sql_message_id,
			sysjobhistory.instance_id
		FROM msdb.dbo.sysjobhistory WITH (NOLOCK)
		WHERE sysjobhistory.run_status = 0
		AND sysjobhistory.step_id > 0 ),
	CTE_GENERATE_DATETIME_DATA AS (
		SELECT
			CTE_NORMALIZE_DATETIME_DATA.sql_server_agent_job_id_guid,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 5, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 7, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 1, 4) AS DATETIME) +
			CAST(STUFF(STUFF(CTE_NORMALIZE_DATETIME_DATA.run_time_string, 5, 0, ':'), 3, 0, ':') AS DATETIME) AS job_start_datetime,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 1, 2) AS INT) * 3600 +
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 3, 2) AS INT) * 60 + 
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 5, 2) AS INT) AS job_duration_seconds,
			CASE CTE_NORMALIZE_DATETIME_DATA.run_status
				WHEN 0 THEN 'Failure'
				WHEN 1 THEN 'Success'
				WHEN 2 THEN 'Retry'
				WHEN 3 THEN 'Canceled'
				ELSE 'Unknown'
			END AS job_status,
			CTE_NORMALIZE_DATETIME_DATA.step_id,
			CTE_NORMALIZE_DATETIME_DATA.step_name,
			CTE_NORMALIZE_DATETIME_DATA.message,
			CTE_NORMALIZE_DATETIME_DATA.retries_attempted,
			CTE_NORMALIZE_DATETIME_DATA.sql_severity,
			CTE_NORMALIZE_DATETIME_DATA.sql_message_id,
			CTE_NORMALIZE_DATETIME_DATA.instance_id
		FROM CTE_NORMALIZE_DATETIME_DATA)
	SELECT
		CTE_GENERATE_DATETIME_DATA.sql_server_agent_job_id_guid,
		 CTE_GENERATE_DATETIME_DATA.job_start_datetime AS job_start_time_utc,
		DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime) AS job_failure_time_utc,
		CTE_GENERATE_DATETIME_DATA.step_id AS job_failure_step_number,
		ISNULL(CTE_GENERATE_DATETIME_DATA.message, '') AS job_step_failure_message,
		CTE_GENERATE_DATETIME_DATA.sql_severity AS job_step_severity,
		CTE_GENERATE_DATETIME_DATA.retries_attempted,
		CTE_GENERATE_DATETIME_DATA.step_name,
		CTE_GENERATE_DATETIME_DATA.sql_message_id,
		CTE_GENERATE_DATETIME_DATA.instance_id
	INTO #job_step_failure
	FROM CTE_GENERATE_DATETIME_DATA
	WHERE CTE_GENERATE_DATETIME_DATA.sql_message_id >-1 AND DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime) > DATEADD(MINUTE, -1 * @minutes_to_monitor, getdate());
	WITH CTE_FAILURE_STEP AS (
		SELECT
			*,
			ROW_NUMBER() OVER (PARTITION BY job_step_failure.sql_server_agent_job_id_guid, job_step_failure.job_failure_time_utc ORDER BY job_step_failure.job_failure_step_number DESC) AS recent_step_rank
		FROM #job_step_failure job_step_failure)
	INSERT INTO [DBADB].dbo.sql_server_agent_job_failure
		(sql_server_agent_job_id, sql_server_agent_instance_id, job_start_time_utc, job_failure_time_utc, job_failure_step_number, job_failure_step_name,
		 job_failure_message, job_step_failure_message, job_step_severity, job_step_message_id, retries_attempted, has_email_been_sent_to_operator)
	SELECT
		sql_server_agent_job.sql_server_agent_job_id,
		CTE_FAILURE_STEP.instance_id,
		job_failure.job_start_time_utc,
		CTE_FAILURE_STEP.job_failure_time_utc,
		CTE_FAILURE_STEP.job_failure_step_number,
		CTE_FAILURE_STEP.step_name AS job_failure_step_name,
		job_failure.job_failure_message,
		CTE_FAILURE_STEP.job_step_failure_message,
		CTE_FAILURE_STEP.job_step_severity,
		CTE_FAILURE_STEP.sql_message_id AS job_step_message_id,
		CTE_FAILURE_STEP.retries_attempted,
		0 AS has_email_been_sent_to_operator
	FROM #job_failure job_failure
	INNER JOIN [DBADB].dbo.sql_server_agent_job
	ON job_failure.sql_server_agent_job_id_guid = sql_server_agent_job.sql_server_agent_job_id_guid
	INNER JOIN CTE_FAILURE_STEP
	ON job_failure.sql_server_agent_job_id_guid = CTE_FAILURE_STEP.sql_server_agent_job_id_guid
	AND job_failure.job_failure_time_utc = CTE_FAILURE_STEP.job_failure_time_utc
	WHERE CTE_FAILURE_STEP.recent_step_rank = 1
	AND CTE_FAILURE_STEP.instance_id NOT IN (SELECT sql_server_agent_instance_id FROM [DBADB].dbo.sql_server_agent_job_failure)
	AND sql_server_agent_job.job_category_name <> 'Unmonitored';


	INSERT INTO [DBADB].dbo.sql_server_agent_job_failure
		(sql_server_agent_job_id, sql_server_agent_instance_id, job_start_time_utc, job_failure_time_utc, job_failure_step_number, job_failure_step_name,
		 job_failure_message, job_step_failure_message, job_step_severity, job_step_message_id, retries_attempted, has_email_been_sent_to_operator)
	SELECT
		sql_server_agent_job.sql_server_agent_job_id,
		job_failure.instance_id,
		job_failure.job_start_time_utc,
		job_failure.job_failure_time_utc,
		0 AS job_failure_step_number,
		'' AS job_failure_step_name,
		job_failure.job_failure_message,
		'' AS job_step_failure_message,
		-1 AS job_step_severity,
		-1 AS job_step_message_id,
		0 AS retries_attempted,
		0 AS has_email_been_sent_to_operator
	FROM #job_failure job_failure
	INNER JOIN dbo.sql_server_agent_job
	ON job_failure.sql_server_agent_job_id_guid = sql_server_agent_job.sql_server_agent_job_id_guid
	WHERE job_failure.instance_id NOT IN (SELECT sql_server_agent_job_failure.sql_server_agent_instance_id FROM dbo.sql_server_agent_job_failure)
	AND NOT EXISTS (SELECT * FROM #job_step_failure job_step_failure WHERE job_failure.sql_server_agent_job_id_guid = job_step_failure.sql_server_agent_job_id_guid	AND job_failure.job_failure_time_utc = job_step_failure.job_failure_time_utc);
	WITH CTE_FAILURE_STEP AS (
		SELECT
			*,
			ROW_NUMBER() OVER (PARTITION BY job_step_failure.sql_server_agent_job_id_guid, job_step_failure.job_failure_time_utc ORDER BY job_step_failure.job_failure_step_number DESC) AS recent_step_rank
		FROM #job_step_failure job_step_failure)
	INSERT INTO [DBADB].dbo.sql_server_agent_job_failure
		(sql_server_agent_job_id, sql_server_agent_instance_id, job_start_time_utc, job_failure_time_utc, job_failure_step_number, job_failure_step_name,
		 job_failure_message, job_step_failure_message, job_step_severity, job_step_message_id, retries_attempted, has_email_been_sent_to_operator)
	SELECT
		sql_server_agent_job.sql_server_agent_job_id,
		CTE_FAILURE_STEP.instance_id,
		CTE_FAILURE_STEP.job_start_time_utc,
		CTE_FAILURE_STEP.job_failure_time_utc,
		CTE_FAILURE_STEP.job_failure_step_number,
		CTE_FAILURE_STEP.step_name AS job_failure_step_name,
		'' AS job_failure_message,
		CTE_FAILURE_STEP.job_step_failure_message,
		CTE_FAILURE_STEP.job_step_severity,
		CTE_FAILURE_STEP.sql_message_id AS job_step_message_id,
		CTE_FAILURE_STEP.retries_attempted,
		0 AS has_email_been_sent_to_operator
	FROM CTE_FAILURE_STEP
	INNER JOIN dbo.sql_server_agent_job
	ON CTE_FAILURE_STEP.sql_server_agent_job_id_guid = sql_server_agent_job.sql_server_agent_job_id_guid
	LEFT JOIN #job_failure job_failure
	ON job_failure.sql_server_agent_job_id_guid = CTE_FAILURE_STEP.sql_server_agent_job_id_guid
	AND job_failure.job_failure_time_utc = CTE_FAILURE_STEP.job_failure_time_utc
	WHERE CTE_FAILURE_STEP.recent_step_rank = 1
	AND job_failure.sql_server_agent_job_id_guid IS NULL 
	AND CTE_FAILURE_STEP.instance_id NOT IN (SELECT sql_server_agent_instance_id FROM [DBADB].dbo.sql_server_agent_job_failure);

	Drop table #job_failure,#job_step_failure;
	SET NOCOUNT OFF;
GO
-- Step 1 code ends....

/*    Step 2 Open Use DBADB  Search the Change in sql doc  

replace Client to Client name ,DBAMail to Server DB mail Profile , teamID@domain.com to preferred Team Mail ID and optional Servername assign Endpoint URl or preferred server name*/

USE DBADB;
GO
SET NOCOUNT ON;


DECLARE @server_name NVARCHAR(255) = @@SERVERNAME; --Change Optional

-- Temporary table to hold email data
DECLARE @EmailData TABLE (
    JobId NVARCHAR(255),
    JobName NVARCHAR(255),
    StepName NVARCHAR(255),
    Schedule NVARCHAR(255),
    FailureCount INT,
    FailureTimes NVARCHAR(MAX),
    FailureMessages NVARCHAR(MAX),
    FirstFailureTime DATETIME,
    LastFailureTime DATETIME,
    JobStartTime DATETIME -- Added Job Start Time column
);


	
WITH RankedFailures AS (
    SELECT 
        j.sql_server_agent_job_id,
        j.sql_server_agent_job_name,
        jf.job_failure_step_name,
        jf.job_step_failure_message,
        jf.job_failure_time_utc,
        j.Frequency,
        j.StartTime,
        j.EndTime,
        ROW_NUMBER() OVER (PARTITION BY j.sql_server_agent_job_id ORDER BY jf.job_failure_time_utc DESC) AS rn
    FROM 
        [DBADB].[dbo].[sql_server_agent_job] j
    JOIN 
        [DBADB].[dbo].[sql_server_agent_job_failure] jf ON j.sql_server_agent_job_id = jf.sql_server_agent_job_id
    WHERE 
        jf.has_email_been_sent_to_operator=0 and (ticket_status is null or ticket_status<>'Open')  AND   jf.job_step_message_id<>-1 
)

, ScheduleCTE AS (
    SELECT 
        j.sql_server_agent_job_id,
        CASE 
            -- Handle Daily Frequency
            WHEN j.Frequency = 'Daily' THEN 
                CASE 
                    WHEN j.DailyFrequency LIKE '%Repeat%' 
                    THEN 'Every day from ' + CAST(j.StartTime AS NVARCHAR(8)) + 
                         ' to ' + CAST(j.EndTime AS NVARCHAR(8)) + 
                         ', repeats every ' + 
                         NULLIF(CAST(SUBSTRING(j.DailyFrequency, CHARINDEX('every ', j.DailyFrequency) + 6, LEN(j.DailyFrequency)) AS NVARCHAR), '') + '.'
                    ELSE 'Every day at ' + CAST(j.StartTime AS NVARCHAR(8)) + '.'
                END

            -- Handle Weekly Frequency
            WHEN j.Frequency = 'Weekly' THEN 
                'Every ' + 
                -- Concatenate the days correctly
                REPLACE(j.DayInterval, ' ', ', ') + 
                ' starts at ' + CAST(j.StartTime AS NVARCHAR(8)) + 
                CASE 
                    WHEN j.DailyFrequency LIKE '%Repeat%' THEN 
                        ', repeats every ' + 
                        NULLIF(CAST(SUBSTRING(j.DailyFrequency, CHARINDEX('every ', j.DailyFrequency) + 6, LEN(j.DailyFrequency)) AS NVARCHAR), '') + '.'
                    ELSE '.' 
                END

            -- Handle Monthly Frequency
            WHEN j.Frequency = 'Monthly' THEN 
                'On the ' + 
                CASE 
                    WHEN j.DayInterval LIKE '%1%' THEN '1st '
                    WHEN j.DayInterval LIKE '%2%' THEN '2nd '
                    WHEN j.DayInterval LIKE '%3%' THEN '3rd '
                    WHEN j.DayInterval LIKE '%4%' THEN '4th '
                    WHEN j.DayInterval LIKE '%5%' THEN '5th '
                    WHEN j.DayInterval LIKE '%last%' THEN 'Last '
                    ELSE 'Unknown '
                END + 
                'day of the month at ' + CAST(j.StartTime AS NVARCHAR(8)) +
                CASE 
                    WHEN j.DailyFrequency LIKE '%Repeat%' THEN 
                        ', repeats every ' + 
                        NULLIF(CAST(SUBSTRING(j.DailyFrequency, CHARINDEX('every ', j.DailyFrequency) + 6, LEN(j.DailyFrequency)) AS NVARCHAR), '') + '.'
                    ELSE '.' 
                END

            -- Default case for other frequencies
            ELSE 'Other frequency or Not scheduled' + j.Frequency
        END AS Schedule
    FROM 
        [DBADB].[dbo].[sql_server_agent_job] j
)

-- Main Query to get aggregated job failure details
INSERT INTO @EmailData (JobId, JobName, StepName, Schedule, FailureCount, FailureTimes, FailureMessages, FirstFailureTime, LastFailureTime, JobStartTime)
SELECT 
    j.sql_server_agent_job_id,
    j.sql_server_agent_job_name,
    jf.job_failure_step_name,
    sc.Schedule,
    COUNT(jf.job_failure_time_utc) AS FailureCount,
    STUFF((SELECT ', ' + CONVERT(NVARCHAR, jf_inner.job_failure_time_utc, 120)
           FROM [DBADB].[dbo].[sql_server_agent_job_failure] jf_inner
           WHERE jf_inner.sql_server_agent_job_id = j.sql_server_agent_job_id
           FOR XML PATH('')), 1, 2, '') AS FailureTimes,
    STUFF((SELECT '; ' + jf_inner.job_step_failure_message
           FROM RankedFailures jf_inner
           WHERE jf_inner.sql_server_agent_job_id = j.sql_server_agent_job_id AND jf_inner.rn = 1  -- Limit to the top message
           FOR XML PATH('')), 1, 2, '') AS FailureMessages,
    MIN(jf.job_failure_time_utc) AS FirstFailureTime,
    MAX(jf.job_failure_time_utc) AS LastFailureTime,
    MIN(jf.job_start_time_utc) AS JobStartTime -- Assuming JobStartTime is the earliest failure time
FROM 
    [DBADB].[dbo].[sql_server_agent_job] j
JOIN 
    [DBADB].[dbo].[sql_server_agent_job_failure] jf ON j.sql_server_agent_job_id = jf.sql_server_agent_job_id
JOIN 
    ScheduleCTE sc ON j.sql_server_agent_job_id = sc.sql_server_agent_job_id
WHERE 
    jf.has_email_been_sent_to_operator=0 and (ticket_status is null or ticket_status<>'Open') AND   jf.job_step_message_id<>-1 
GROUP BY 
    j.sql_server_agent_job_id, j.sql_server_agent_job_name, jf.job_failure_step_name, sc.Schedule;

	
--select * from @EmailData;

-- Prepare email content
DECLARE @subject NVARCHAR(255),
        @body NVARCHAR(MAX),
        @JobId NVARCHAR(255),
        @JobName NVARCHAR(255),
        @StepName NVARCHAR(255),
        @Schedule NVARCHAR(255),
        @FailureCount INT,
        @FailureTimes NVARCHAR(MAX),
        @FailureMessages NVARCHAR(MAX),
        @FirstFailureTime DATETIME,
        @LastFailureTime DATETIME,
		@JobStartTime DATETIME;


DECLARE EmailCursor CURSOR FOR 
SELECT JobId, JobName, StepName,  Schedule, FailureCount, FailureTimes, FailureMessages, FirstFailureTime, LastFailureTime ,JobStartTime
FROM @EmailData;

OPEN EmailCursor;
FETCH NEXT FROM EmailCursor INTO 
    @JobId, @JobName, @StepName, @Schedule, @FailureCount, @FailureTimes, @FailureMessages, @FirstFailureTime, @LastFailureTime,@JobStartTime;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Set email subject
    SET @subject = 'Client '+ @server_name +' '+@JobName + ' Failed Alert -> Open' ; --Change

    -- Prepare email body based on the number of failures
    IF @FailureCount > 1
    BEGIN
        -- Multiple failures HTML format
        SET @body = 
            '<html>
            <head>
                 <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #ffffff; /* White background */
            color: #333;
        }
        h2 {
            color: #d9534f;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background-color: #ffffff; /* White table background */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        th, td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }
        th {
            background-color: #343a40; /* Dark gray for headers */
            color: #ffffff; /* White text color for headers */
        }
        tr:nth-child(even) {
            background-color: #f9f9f9; /* Light gray for even rows */
        }
        tr:hover {
            background-color: #f1f1f1; /* Hover effect for rows */
        }
        p {
            text-align: center;
            margin-top: 20px;
            font-weight: bold;
        }
    </style>
            </head>
            <body>
                <h2>Job Failure Alert </h2>
                <table>
                    <tr><th>Job Name</th><td>' + @JobName + '</td></tr>
                    <tr><th>Step Name</th><td>' + ISNULL(@StepName, 'N/A') + '</td></tr>
                    <tr><th>Error Messages</th><td>' + ISNULL(@FailureMessages, 'N/A') + '</td></tr>
                    <tr><th>Failure Count</th><td>' + CAST(@FailureCount AS NVARCHAR) + '</td></tr>
                    <tr><th>First Start Time</th><td>' + CONVERT(NVARCHAR, @JobStartTime, 120) + '</td></tr>
                    <tr><th>First Failure Time</th><td>' + CONVERT(NVARCHAR, @FirstFailureTime, 120) + '</td></tr>
                    <tr><th>Last Failure Time</th><td>' + CONVERT(NVARCHAR, @LastFailureTime, 120) + '</td></tr>
                    <tr><th>Schedule</th><td>' + @Schedule + '</td></tr>
                </table>
            </body>
            </html>';
    END
    ELSE
    BEGIN
        -- Single failure HTML format
        SET @body = 
            '<html>
            <head>
                 <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #ffffff; /* White background */
            color: #333;
        }
        h2 {
            color: #d9534f;
            text-align: center;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background-color: #ffffff; /* White table background */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        th, td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }
        th {
            background-color: #343a40; /* Dark gray for headers */
            color: #ffffff; /* White text color for headers */
        }
        tr:nth-child(even) {
            background-color: #f9f9f9; /* Light gray for even rows */
        }
        tr:hover {
            background-color: #f1f1f1; /* Hover effect for rows */
        }
        p {
            text-align: center;
            margin-top: 20px;
            font-weight: bold;
        }
    </style>
            </head>
            <body>
                <h2>Job Failure Alert </h2>
                <table>
                    <tr><th>Job Name</th><td>' + @JobName + '</td></tr>
                    <tr><th>Step Name</th><td>' + ISNULL(@StepName, 'N/A') + '</td></tr>
                    <tr><th>Error Message</th><td>' + ISNULL(@FailureMessages, 'N/A') + '</td></tr>
                    <tr><th>Job Start Time</th><td>' + CONVERT(NVARCHAR, @JobStartTime, 120) + '</td></tr>
                    <tr><th>Failure Time</th><td>' + CONVERT(NVARCHAR, @LastFailureTime, 120) + '</td></tr>
                    <tr><th>Schedule</th><td>' + @Schedule + '</td></tr>
                </table>
            </body>
            </html>';
    END

    -- Send the email
	--select @body;
   EXEC msdb.dbo.sp_send_dbmail
        @profile_name = 'DBAMail', -- Change
        @recipients = 'teamID@domain.com', -- --Change
        @subject = @subject,
        @body = @body,
        @body_format = 'HTML';
		
	UPDATE [DBADB].[dbo].[sql_server_agent_job_failure]
   SET 
       has_email_been_sent_to_operator = 1,
       ticket_status = 'Open'
   WHERE sql_server_agent_job_id = @JobId and has_email_been_sent_to_operator =0;

    FETCH NEXT FROM EmailCursor INTO 
        @JobId, @JobName, @StepName,  @Schedule, @FailureCount, @FailureTimes, @FailureMessages, @FirstFailureTime, @LastFailureTime,@JobStartTime;
END

CLOSE EmailCursor;
DEALLOCATE EmailCursor;
SET NOCOUNT OFF;
GO

/* Step 3 Close Use DBADB search the Change in sql doc  

replace Client to Client name ,DBAMail to Server DB mail Profile , teamID@domain.com to preferred Team Mail ID and optional Servername assign Endpoint URl or preferred server name*/

USE DBADB;
GO
SET NOCOUNT ON;
IF OBJECT_ID('tempdb..#job_success', 'U') IS NOT NULL
        DROP TABLE #job_success;
		IF OBJECT_ID('tempdb..#job_step_success', 'U') IS NOT NULL
		DROP TABLE #job_step_success;

DECLARE @server_name NVARCHAR(255) = @@SERVERNAME; -- Change Optional
DECLARE @minutes_to_monitor SMALLINT = 480; --last 8 hours success check
-- Temporary table to hold email data
DECLARE @EmailData TABLE (
    JobId NVARCHAR(255),
    JobName NVARCHAR(255),
    StepName NVARCHAR(255),
    Schedule NVARCHAR(255),
    LastSuccessTime NVARCHAR(MAX),
    SuccessMessages NVARCHAR(MAX),
    LastFailureTime DATETIME,
    JobStartTime DATETIME 
);
WITH CTE_NORMALIZE_DATETIME_DATA AS (
		SELECT
			sysjobhistory.job_id AS sql_server_agent_job_id_guid,
			CAST(sysjobhistory.run_date AS VARCHAR(MAX)) AS run_date_string, 
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_time AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_time AS VARCHAR(MAX)) AS run_time_string,
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_duration AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_duration AS VARCHAR(MAX)) AS run_duration_string,
			sysjobhistory.run_status,
			sysjobhistory.message,
			sysjobhistory.instance_id
		FROM msdb.dbo.sysjobhistory WITH (NOLOCK)
		WHERE sysjobhistory.run_status = 1
		AND sysjobhistory.step_id = 0),
	CTE_GENERATE_DATETIME_DATA AS (
		SELECT
			CTE_NORMALIZE_DATETIME_DATA.sql_server_agent_job_id_guid,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 5, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 7, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 1, 4) AS DATETIME) +
			CAST(STUFF(STUFF(CTE_NORMALIZE_DATETIME_DATA.run_time_string, 5, 0, ':'), 3, 0, ':') AS DATETIME) AS job_start_datetime,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 1, 2) AS INT) * 3600 +
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 3, 2) AS INT) * 60 + 
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 5, 2) AS INT) AS job_duration_seconds,
			CASE CTE_NORMALIZE_DATETIME_DATA.run_status
				WHEN 0 THEN 'Failure'
				WHEN 1 THEN 'Success'
				WHEN 2 THEN 'Retry'
				WHEN 3 THEN 'Canceled'
				ELSE 'Unknown'
			END AS job_status,
			CTE_NORMALIZE_DATETIME_DATA.message,
			CTE_NORMALIZE_DATETIME_DATA.instance_id
		FROM CTE_NORMALIZE_DATETIME_DATA)
	SELECT
		CTE_GENERATE_DATETIME_DATA.sql_server_agent_job_id_guid,
		( CTE_GENERATE_DATETIME_DATA.job_start_datetime) AS job_start_time_utc,
		( DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime)) AS job_Success_time_utc
		
		INTO #job_success
	FROM CTE_GENERATE_DATETIME_DATA
	WHERE ( DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime)) > DATEADD(MINUTE, -1 * @minutes_to_monitor, getdate());
	WITH CTE_NORMALIZE_DATETIME_DATA AS (
		SELECT
			sysjobhistory.job_id AS sql_server_agent_job_id_guid,
			CAST(sysjobhistory.run_date AS VARCHAR(MAX)) AS run_date_string, 
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_time AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_time AS VARCHAR(MAX)) AS run_time_string,
			REPLICATE('0', 6 - LEN(CAST(sysjobhistory.run_duration AS VARCHAR(MAX)))) + CAST(sysjobhistory.run_duration AS VARCHAR(MAX)) AS run_duration_string,
			sysjobhistory.run_status,
			sysjobhistory.step_id,
			sysjobhistory.step_name,
			sysjobhistory.message,
			sysjobhistory.retries_attempted,
			sysjobhistory.sql_severity,
			sysjobhistory.sql_message_id,
			sysjobhistory.instance_id
		FROM msdb.dbo.sysjobhistory WITH (NOLOCK)
		WHERE sysjobhistory.run_status = 1
		AND sysjobhistory.step_id > 0 ),
	CTE_GENERATE_DATETIME_DATA AS (
		SELECT
			CTE_NORMALIZE_DATETIME_DATA.sql_server_agent_job_id_guid,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 5, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 7, 2) + '/' + SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_date_string, 1, 4) AS DATETIME) +
			CAST(STUFF(STUFF(CTE_NORMALIZE_DATETIME_DATA.run_time_string, 5, 0, ':'), 3, 0, ':') AS DATETIME) AS job_start_datetime,
			CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 1, 2) AS INT) * 3600 +
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 3, 2) AS INT) * 60 + 
				CAST(SUBSTRING(CTE_NORMALIZE_DATETIME_DATA.run_duration_string, 5, 2) AS INT) AS job_duration_seconds,
			CASE CTE_NORMALIZE_DATETIME_DATA.run_status
				WHEN 0 THEN 'Failure'
				WHEN 1 THEN 'Success'
				WHEN 2 THEN 'Retry'
				WHEN 3 THEN 'Canceled'
				ELSE 'Unknown'
			END AS job_status,
			CTE_NORMALIZE_DATETIME_DATA.step_id,
			CTE_NORMALIZE_DATETIME_DATA.step_name,
			CTE_NORMALIZE_DATETIME_DATA.message,
			CTE_NORMALIZE_DATETIME_DATA.retries_attempted,
			CTE_NORMALIZE_DATETIME_DATA.sql_severity,
			CTE_NORMALIZE_DATETIME_DATA.sql_message_id,
			CTE_NORMALIZE_DATETIME_DATA.instance_id
		FROM CTE_NORMALIZE_DATETIME_DATA)
	SELECT
		CTE_GENERATE_DATETIME_DATA.sql_server_agent_job_id_guid,
		 CTE_GENERATE_DATETIME_DATA.job_start_datetime AS job_start_time_utc,
		DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime) AS job_success_time_utc,
		CTE_GENERATE_DATETIME_DATA.step_id AS job_failure_step_number,
		ISNULL(CTE_GENERATE_DATETIME_DATA.message, '') AS job_step_success_message,
		CTE_GENERATE_DATETIME_DATA.sql_severity AS job_step_severity,
		CTE_GENERATE_DATETIME_DATA.retries_attempted,
		CTE_GENERATE_DATETIME_DATA.step_name,
		CTE_GENERATE_DATETIME_DATA.sql_message_id,
		CTE_GENERATE_DATETIME_DATA.instance_id
	INTO #job_step_success
	FROM CTE_GENERATE_DATETIME_DATA
	WHERE  DATEADD(SECOND, ISNULL(CTE_GENERATE_DATETIME_DATA.job_duration_seconds, 0), CTE_GENERATE_DATETIME_DATA.job_start_datetime) > DATEADD(MINUTE, -1 * @minutes_to_monitor, getdate());
	
	WITH ScheduleCTE AS (
    SELECT 
        j.sql_server_agent_job_id,
        CASE 
            -- Handle Daily Frequency
            WHEN j.Frequency = 'Daily' THEN 
                CASE 
                    WHEN j.DailyFrequency LIKE '%Repeat%' 
                    THEN 'Every day from ' + CAST(j.StartTime AS NVARCHAR(8)) + 
                         ' to ' + CAST(j.EndTime AS NVARCHAR(8)) + 
                         ', repeats every ' + 
                         NULLIF(CAST(SUBSTRING(j.DailyFrequency, CHARINDEX('every ', j.DailyFrequency) + 6, LEN(j.DailyFrequency)) AS NVARCHAR), '') + '.'
                    ELSE 'Every day at ' + CAST(j.StartTime AS NVARCHAR(8)) + '.'
                END

            -- Handle Weekly Frequency
            WHEN j.Frequency = 'Weekly' THEN 
                'Every ' + 
                -- Concatenate the days correctly
                REPLACE(j.DayInterval, ' ', ', ') + 
                ' starts at ' + CAST(j.StartTime AS NVARCHAR(8)) + 
                CASE 
                    WHEN j.DailyFrequency LIKE '%Repeat%' THEN 
                        ', repeats every ' + 
                        NULLIF(CAST(SUBSTRING(j.DailyFrequency, CHARINDEX('every ', j.DailyFrequency) + 6, LEN(j.DailyFrequency)) AS NVARCHAR), '') + '.'
                    ELSE '.' 
                END

            -- Handle Monthly Frequency
            WHEN j.Frequency = 'Monthly' THEN 
                'On the ' + 
                CASE 
                    WHEN j.DayInterval LIKE '%1%' THEN '1st '
                    WHEN j.DayInterval LIKE '%2%' THEN '2nd '
                    WHEN j.DayInterval LIKE '%3%' THEN '3rd '
                    WHEN j.DayInterval LIKE '%4%' THEN '4th '
                    WHEN j.DayInterval LIKE '%5%' THEN '5th '
                    WHEN j.DayInterval LIKE '%last%' THEN 'Last '
                    ELSE 'Unknown '
                END + 
                'day of the month at ' + CAST(j.StartTime AS NVARCHAR(8)) +
                CASE 
                    WHEN j.DailyFrequency LIKE '%Repeat%' THEN 
                        ', repeats every ' + 
                        NULLIF(CAST(SUBSTRING(j.DailyFrequency, CHARINDEX('every ', j.DailyFrequency) + 6, LEN(j.DailyFrequency)) AS NVARCHAR), '') + '.'
                    ELSE '.' 
                END

            -- Default case for other frequencies
            ELSE 'Other frequency or Not scheduled' + j.Frequency
        END AS Schedule
    FROM 
        [DBADB].[dbo].[sql_server_agent_job] j
)
INSERT INTO @EmailData (JobId, JobName, StepName, Schedule ,JobStartTime, SuccessMessages, LastSuccessTime , LastFailureTime)
	select j.sql_server_agent_job_id,
    j.sql_server_agent_job_name,
	js.step_name , 
	sc.Schedule ,
	max(js.job_start_time_utc) as Last_succes_Start_timestamp,
	js.job_step_success_message,
	max(CONVERT(VARCHAR(23), CAST(js.job_success_time_utc AS DATETIME), 121)) as Last_job_success_timestamp , 
	max(jf.job_failure_time_utc) as Last_job_failure_timestamp 
	from #job_step_success js inner join [DBADB].[dbo].[sql_server_agent_job] j 
        ON js.sql_server_agent_job_id_guid = j.sql_server_agent_job_id_guid inner join [DBADB].[dbo].[sql_server_agent_job_failure] jf on j.sql_server_agent_job_id=jf.sql_server_agent_job_id JOIN 
    ScheduleCTE sc ON j.sql_server_agent_job_id = sc.sql_server_agent_job_id
		WHERE jf.ticket_status = 'Open' and js.step_name=jf.job_failure_step_name and jf.job_step_message_id>-1
		
		group by j.sql_server_agent_job_id,
    j.sql_server_agent_job_name,
	js.step_name , 
	sc.Schedule ,js.job_step_success_message
	having max(CONVERT(VARCHAR(23), CAST(js.job_success_time_utc AS DATETIME), 121)) >max(jf.job_failure_time_utc);

--select JobId, JobName, StepName, Schedule ,JobStartTime, SuccessMessages, LastSuccessTime  , LastFailureTime from @EmailData;

    
DECLARE @subject NVARCHAR(255),
        @body NVARCHAR(MAX),
        @JobId NVARCHAR(255),
        @JobName NVARCHAR(255),
        @StepName NVARCHAR(255),
        @Schedule NVARCHAR(255),
        @SuccessMessages NVARCHAR(MAX),
        @LastFailureTime DATETIME,
        @LastSuccessTime DATETIME,
		@JobStartTime DATETIME;

DECLARE EmailCursor CURSOR FOR 
SELECT JobId, JobName, StepName, Schedule ,JobStartTime, SuccessMessages, LastSuccessTime , LastFailureTime
FROM @EmailData;

OPEN EmailCursor;
FETCH NEXT FROM EmailCursor INTO 
    @JobId, @JobName, @StepName, @Schedule ,@JobStartTime, @SuccessMessages, @LastSuccessTime , @LastFailureTime;

WHILE @@FETCH_STATUS = 0
BEGIN

	
	SET @subject = 'Client '+ @server_name +' '+@JobName + ' Failed Alert -> Closed ' ; -- Change

	 SET @body ='<html>
    <head>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f4f6f9; /* Light gray background */
                color: #495057; /* Darker text color for better contrast */
            }
            h2 {
                color: #007bff; /* Soft blue color for headings */
                text-align: center;
                margin-bottom: 20px;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background-color: #ffffff; /* White background for table */
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow for table */
            }
            th, td {
                padding: 15px;
                border: 1px solid #dee2e6; /* Lighter border color */
                text-align: left;
            }
            th {
                background-color: #007bff; /* Blue color for header */
                color: #ffffff; /* White text in header */
            }
            tr:nth-child(even) {
                background-color: #f8f9fa; /* Light gray for even rows */
            }
            tr:hover {
                background-color: #f1f1f1; /* Light hover effect for rows */
            }
            p {
                text-align: center;
                margin-top: 20px;
                font-weight: bold;
                color: #6c757d; /* Gray text color */
            }
        </style>
    </head>
    <body>
        <h2>Failed Job Success Alert</h2>
        <table>
            <tr><th>Job Name</th><td>' + @JobName + '</td></tr>
            <tr><th>Step Name</th><td>' + ISNULL(@StepName, 'N/A') + '</td></tr>
            <tr><th>Success Message</th><td>' + ISNULL(@SuccessMessages, 'N/A') + '</td></tr>
            <tr><th>Last Run Start Time</th><td>' + CONVERT(NVARCHAR, @JobStartTime, 120) + '</td></tr>
            <tr><th>Last Failure Time</th><td>' + CONVERT(NVARCHAR, @LastFailureTime, 120) + '</td></tr>
            <tr><th>Last Success Time</th><td>' + CONVERT(NVARCHAR, @LastSuccessTime, 120) + '</td></tr>
            <tr><th>Schedule</th><td>' + @Schedule + '</td></tr>
        </table>
    </body>
</html>';
--select @body;
   EXEC msdb.dbo.sp_send_dbmail
        @profile_name = 'DBAMail', -- Change
        @recipients = 'teamID@domain.com', -- Change
        @subject = @subject,
        @body = @body,
        @body_format = 'HTML';
		
   UPDATE [DBADB].[dbo].[sql_server_agent_job_failure]
   SET ticket_status = 'Closed'
   WHERE sql_server_agent_job_id = @JobId and has_email_been_sent_to_operator =1 and ticket_status = 'Open';

    FETCH NEXT FROM EmailCursor INTO 
        @JobId, @JobName, @StepName, @Schedule ,@JobStartTime, @SuccessMessages, @LastSuccessTime , @LastFailureTime;
END

CLOSE EmailCursor;
DEALLOCATE EmailCursor;	

DROP TABLE #job_success,#job_step_success;
SET NOCOUNT OFF;
GO
